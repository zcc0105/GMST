import networkx as nx
import os
import random
import numpy as np


class Node:
    def __init__(self, activate_pro, seed=None):
        self.identifier = '0'
        self.thres = random.uniform(0.0001, 1)
        self.activate_pro = activate_pro
        self.activated_pro = 0
        self.purchase_budget = self.generate_purchase_pro(seed)

    def generate_purchase_pro(self, seed=None):
        if seed is not None:
            np.random.seed(seed)
        mu = 1/2
        sigma = 1/6
        return np.random.normal(mu, sigma)

    def regenerate_identifier(self, identifier):
        self.identifier = identifier

    def __str__(self):
        return f"Node(identifier: {self.identifier}, thres: {self.thres}, " \
               f"activate_pro: {self.activate_pro}, purchase_pro: {self.purchase_budget:.4f})"


class SeedsInfo:
    def __init__(self) -> None:
        self.datasets = [
            os.getcwd() + '/dataset/p2p.txt',
            os.getcwd() + '/dataset/cit.txt',
            os.getcwd() + '/dataset/facebook.txt',
            os.getcwd() + '/dataset/dblp.txt'
        ]
        self.seeds = {
            'p2p': [
                [822, 89, 92, 563, 823, 837, 3297, 3298, 3299, 3300],
                [822, 89, 92, 563, 823, 837, 3297, 3298, 3299, 3300, 3301, 1736, 1737, 1738, 1739, 1740, 331, 820,
                 918, 951],
                [822, 89, 92, 563, 823, 837, 3297, 3298, 3299, 3300, 3301, 1736, 1737, 1738, 1739, 1740, 331, 820, 918,
                 951, 1016, 2768, 3475, 3536, 4407, 4408, 616, 1489, 1789, 2184],
                [822, 89, 92, 563, 823, 837, 3297, 3298, 3299, 3300, 3301, 1736, 1737, 1738, 1739, 1740, 331, 820, 918,
                 951, 1016, 2768, 3475, 3536, 4407, 4408, 616, 1489, 1789, 2184, 2211, 3774, 4273, 5576, 6018, 6019, 43,
                 688, 968, 1106],
                [22, 89, 92, 563, 823, 837, 3297, 3298, 3299, 3300, 3301, 1736, 1737, 1738, 1739, 1740, 331, 820, 918,
                 951, 1016, 2768, 3475, 3536, 4407, 4408, 616, 1489, 1789, 2184, 2211, 3774, 4273, 5576, 6018, 6019,
                 43, 688, 968, 1106, 2366, 3482, 3796, 4513, 4772, 4773, 539, 1795, 1797, 4638],
            ],
            'cit': [
                [5025, 9712301, 9812382, 9810409, 9901331, 9805481, 9609309, 9710541, 9908349, 9707488],
                [5025, 9712301, 9812382, 9810409, 9901331, 9805481, 9609309, 9710541, 9908349, 9707488, 9610553,
                 9906422, 9701241, 9812304, 9709423, 8152, 9708344, 9806350, 9809500, 9812348],
                [5025, 9712301, 9812382, 9810409, 9901331, 9805481, 9609309, 9710541, 9908349, 9707488, 9610553,
                 9906422, 9701241, 9812304, 9709423, 8152, 9708344, 9806350, 9809500, 9812348, 9809429, 9610334,
                 9707309, 9702223, 9709390, 9908378, 2057, 9801322, 9606427, 9706210],
                [5025, 9712301, 9812382, 9810409, 9901331, 9805481, 9609309, 9710541, 9908349, 9707488, 9610553,
                 9906422, 9701241, 9812304, 9709423, 8152, 9708344, 9806350, 9809500, 9812348, 9809429, 9610334,
                 9707309, 9702223, 9709390, 9908378, 2057, 9801322, 9606427, 9706210, 9809550, 9906337, 9711224,
                 9906338, 9601359, 9808467, 9910252, 9806526, 9608310, 9612235],
                [5025, 9712301, 9812382, 9810409, 9901331, 9805481, 9609309, 9710541, 9908349, 9707488, 9610553,
                 9906422, 9701241, 9812304, 9709423, 8152, 9708344, 9806350, 9809500, 9812348, 9809429, 9610334,
                 9707309, 9702223, 9709390, 9908378, 2057, 9801322, 9606427, 9706210, 9809550, 9906337, 9711224,
                 9906338, 9601359, 9808467, 9910252, 9806526, 9608310, 9612235, 9708342, 9703445, 9709509, 9808430,
                 9903439, 9511336, 9803250, 9702287, 9707224, 9708343]
            ],
            'facebook': [
                        [107, 513, 400, 559, 373, 492, 500, 378, 436, 431],
                        [1941, 107, 2218, 1983, 2073, 2220, 2172, 1943, 1917, 2201, 2331, 2118, 2624, 1962, 2290, 2414,
                                  2339, 2500, 2326, 2376],
                        [1941, 107, 2218, 1983, 2073, 2220, 2172, 1943, 1917, 2201, 2331, 2118, 2624, 1962, 2290, 2414,
                         2339, 2500, 2326, 2376, 1984, 2139, 2409, 2045, 2278, 2037, 2200, 2553, 1966, 2356],
                        [1941, 107, 2218, 1983, 2073, 2220, 2172, 1943, 1917, 2201, 2331, 2118, 2624, 1962, 2290, 2414,
                         2339, 2500, 2326, 2376, 1984, 2139, 2409, 2045, 2278, 2037, 2200, 2553, 1966, 2356, 2140, 2404,
                         2124, 2069, 2190, 2352, 2374, 2655, 2638, 2520],
                        [1941, 107, 2218, 1983, 2073, 2220, 2172, 1943, 1917, 2201, 2331, 2118, 2624, 1962, 2290, 2414, 2339,
                        2500, 2326, 2376, 1984, 2139, 2409, 2045, 2278, 2037, 2200, 2553, 1966, 2356, 2140, 2404, 2124, 2069,
                        2190, 2352, 2374, 2655, 2638, 2520, 2074, 2446, 2549, 2289, 2112, 2154, 2133, 2020, 1718, 2299]
            ],
            'dblp': [[116246, 115911, 220936, 321771, 38868, 209722, 371620, 371621, 97078, 71536],
                     [116246, 115911, 220936, 321771, 38868, 209722, 371620, 371621, 97078, 71536, 94469, 263799,
                      382574, 405197, 405198, 405199, 405200, 405201, 409529, 409530],
                     [116246, 115911, 220936, 321771, 38868, 209722, 371620, 371621, 97078, 71536, 94469, 263799,
                      382574, 405197, 405198, 405199, 405200, 405201, 409529, 409530, 409531, 409532, 15046, 35249,
                      44646, 55049, 87319, 11457, 34924, 45479],
                     [116246, 115911, 220936, 321771, 38868, 209722, 371620, 371621, 97078, 71536, 94469, 263799,
                      382574, 405197, 405198, 405199, 405200, 405201, 409529, 409530, 409531, 409532, 15046, 35249,
                      44646, 55049, 87319, 11457, 34924, 45479, 1442, 27213, 38700, 68391, 59601,
                      68641, 125461, 84954, 26854, 28657],
                     [116246, 115911, 220936, 321771, 38868, 209722, 371620, 371621, 97078, 71536, 94469, 263799,
                      382574,
                      405197, 405198, 405199, 405200, 405201, 409529, 409530, 409531, 409532, 15046, 35249, 44646,
                      55049,
                      87319, 11457, 34924, 45479, 1442, 27213, 38700, 68391, 59601, 68641, 125461, 84954, 26854, 28657,
                      58177, 60257, 66900, 75800, 98329, 112531, 28290, 29515, 34877, 36799]]
        }

    def parse_graph_txt_file(self, fname):
        edge_list = []
        if 'facebook' in fname:
            separator = ' '
        else:
            separator = '\t'
        with open(fname, 'r') as f:
            for line in f.readlines():
                if line.startswith('#'):
                    continue
                edge_list.append(list(map(int, line.strip().split(separator))))
        if 'facebook' in fname or 'dblp' in fname or 'youtube' in fname or 'BA' in fname:
            G = self.graphLoad(edge_list)
        else:
            G = self.digraphLoad(edge_list)
        return G

    def graphLoad(self, edge_list):
        G = nx.Graph()
        G.add_edges_from(edge_list)
        for u in G.nodes():
            pro = 1.0 / G.degree(u)
            # pro = random.uniform(0, 1)
            G.nodes[u]['node_object'] = Node(pro)
        return G

    def digraphLoad(self, edge_list):
        G = nx.DiGraph()
        G.add_edges_from(edge_list)
        for u in G.nodes():
            if G.in_degree(u) != 0:
                pro = 1.0 / G.in_degree(u)
            else:
                pro = 0.0
            # pro = random.uniform(0, 1)
            G.nodes[u]['node_object'] = Node(pro)
        return G






